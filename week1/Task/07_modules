Here is a **complete guide on Python Modules**, including:

- Definitions of all related terms
- Key points
- Visual chart of types
- Example codes with output in comments
- Graphical comparison of **module**, **package**, and **library**

---

## üß† What is a Module in Python?

A **module** is a file containing Python code (functions, classes, variables) that you can reuse in other Python programs by importing it.

### ‚úÖ Why Use Modules?

- Code reuse
- Better code organization
- Avoid redundancy
- Easier debugging & maintenance

---

## üî§ Definitions of Key Terms

| **Term**                | **Definition**                                                                 |
| ----------------------- | ------------------------------------------------------------------------------ |
| **Module**              | A Python file (`.py`) that contains code like functions, variables, or classes |
| **Import**              | The keyword used to bring a module's contents into the current script          |
| **Built-in Module**     | Modules that come with Python installation (e.g., `math`, `os`)                |
| **User-defined Module** | Custom modules written by the user (e.g., `my_module.py`)                      |
| **Package**             | A folder that contains multiple modules (must include `__init__.py` file)      |
| **Library**             | A collection of modules and packages that solve a specific problem             |

---

## üìä Types of Modules in Python

```
                   +--------------------------+
                   |      Python Modules      |
                   +-----------+--------------+
                               |
        +----------------------+--------------------+
        |                                           |
+------------------+                     +----------------------+
| Built-in Modules |                     | User-defined Modules |
+------------------+                     +----------------------+
| math, os, random |                     | my_module.py         |
| datetime, sys    |                     | utils.py             |
+------------------+                     +----------------------+
```

---

## üß™ Built-in Module Example: `math`

```python
import math

print(math.sqrt(25))  # Output: 5.0
print(math.pi)        # Output: 3.141592653589793
```

---

## üß™ User-defined Module Example

Create a file called `greet.py`:

```python
# greet.py
def say_hello(name):
    return f"Hello, {name}!"

pi_value = 3.14
```

Then use it in another file:

```python
# main.py
import greet

print(greet.say_hello("Prashanshi"))  # Output: Hello, Prashanshi!
print(greet.pi_value)                 # Output: 3.14
```

---

## üìÇ Python Package Example

```
my_package/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ module1.py
‚îî‚îÄ‚îÄ module2.py
```

- `__init__.py` can be empty or contain setup code.
- You can import like:

```python
from my_package import module1
```

---

## üìà Graph: Difference Between Module, Package, Library

| Feature   | Module            | Package                             | Library                         |
| --------- | ----------------- | ----------------------------------- | ------------------------------- |
| Structure | Single `.py` file | Folder with modules & `__init__.py` | Collection of packages/modules  |
| Use       | Code reuse        | Organizing related modules          | Large-scale reuse (e.g., NumPy) |
| Example   | `math.py`         | `my_package/`                       | `scikit-learn`, `TensorFlow`    |

---

## üî¢ Commonly Used Built-in Modules

| Module     | Purpose                      |
| ---------- | ---------------------------- |
| `math`     | Mathematical operations      |
| `random`   | Random number generation     |
| `datetime` | Working with dates and times |
| `os`       | Operating system interface   |
| `sys`      | System-specific parameters   |
| `json`     | JSON encoding and decoding   |
| `re`       | Regular expressions          |

---

## üìò Importing Modules: 4 Ways

```python
# 1. Basic import
import math
print(math.factorial(5))  # Output: 120

# 2. Import with alias
import math as m
print(m.sqrt(49))  # Output: 7.0

# 3. Import specific function
from math import pow
print(pow(2, 3))  # Output: 8.0

# 4. Import all (not recommended)
from math import *
print(sin(0))  # Output: 0.0
```

---

## üì¶ Creating and Using Your Own Module

### Step 1: Create `calculator.py`

```python
# calculator.py
def add(a, b):
    return a + b

def subtract(a, b):
    return a - b
```

### Step 2: Create `main.py`

```python
import calculator

print(calculator.add(10, 5))      # Output: 15
print(calculator.subtract(10, 5)) # Output: 5
```

---

## üìå Key Points Summary (Bullet Format)

- A **module** is a `.py` file with functions, classes, or variables.
- **Built-in modules** come with Python; **user-defined** ones are created by developers.
- Modules help **reuse** code and improve **organization**.
- A **package** is a collection of modules inside a directory.
- A **library** is a bigger bundle containing many packages and modules.

---

## üß† Tip: Use `dir()` to explore module contents

```python
import math
print(dir(math))  # Lists all attributes/functions in math module
```

---

---

## ‚úÖ 1. **Practice Exercises with Solutions**

```python
# ‚úÖ Exercise 1: Import a built-in module (math)
import math
print(math.sqrt(25))
# Output: 5.0

# ‚úÖ Exercise 2: Use math module to find factorial
print(math.factorial(5))
# Output: 120

# ‚úÖ Exercise 3: Use random module to generate random number
import random
print(random.randint(1, 10))
# Output: (Random value between 1 and 10)

# ‚úÖ Exercise 4: Use datetime module to get today's date
import datetime
today = datetime.date.today()
print(today)
# Output: YYYY-MM-DD (Today's date)

# ‚úÖ Exercise 5: Rename a module during import
import math as m
print(m.pi)
# Output: 3.141592653589793

# ‚úÖ Exercise 6: Import only specific functions
from math import pow, ceil
print(pow(2, 3))  # 2^3
# Output: 8.0
print(ceil(4.3))
# Output: 5

# ‚úÖ Exercise 7: Create your own module and use it (see section 4 below)

# ‚úÖ Exercise 8: List all functions/attributes of a module
print(dir(math))
# Output: ['__doc__', '__loader__', ..., 'sqrt', 'tan', 'trunc']
```

---

## ‚ùì 2. **MCQs and Interview-Style Questions**

### üß† MCQs:

**Q1.** Which of the following is the correct way to import a module?
A. `import[math]`
B. `import math`
C. `math import`
D. `include math`
‚úÖ **Answer:** B

---

**Q2.** What does the `random.randint(1, 10)` function do?
A. Selects a float between 1 and 10
B. Selects a random int from 1 to 9
C. Selects a random int between 1 and 10 (inclusive)
D. Throws an error
‚úÖ **Answer:** C

---

**Q3.** Which module is used to work with date and time in Python?
A. `time`
B. `datetime`
C. `calendar`
D. All of the above
‚úÖ **Answer:** D

---

**Q4.** What will `from math import *` do?
A. Import only basic math functions
B. Import everything from math
C. Import nothing
D. Cause an error
‚úÖ **Answer:** B

---

**Q5.** What is a module in Python?
A. A file with variables only
B. A file with class only
C. A Python file containing functions, variables, or classes
D. A built-in function
‚úÖ **Answer:** C

---

### üí¨ Interview Questions:

1. **What is a module in Python?**
   ‚úÖ A file containing Python code (functions, classes, variables) that can be reused in other programs.

2. **What's the difference between module and package?**
   ‚úÖ A module is a single `.py` file, a package is a directory with `__init__.py` and sub-modules.

3. **Why use modules?**
   ‚úÖ To organize code better, reuse logic, and separate concerns.

4. **How can we import a custom module?**
   ‚úÖ Save a `.py` file (like `mymodule.py`) in the same directory and use `import mymodule`.

5. **What is `__name__ == "__main__"` used for?**
   ‚úÖ To execute code only when the script is run directly, not when imported as a module.

---

## üìù 3. **Quiz Format (Python Modules)**

```
üìù PYTHON MODULES QUIZ üß†

1. Which of the following is NOT a Python module?
   a) math
   b) random
   c) system
   d) datetime

2. What is the output of:
   import math
   print(math.ceil(4.1))
   a) 4
   b) 5
   c) 4.1
   d) Error

3. What is the correct way to import only the sqrt function from math?
   a) from math import sqrt
   b) import sqrt from math
   c) math.import(sqrt)
   d) include math.sqrt

4. Which method lists all the attributes of a module?
   a) help()
   b) list()
   c) dir()
   d) attr()

5. How can you import a module under a new name?
   a) import math as m
   b) from math import *
   c) import math
   d) module(math)

üéØ Answers:
1 ‚Üí c
2 ‚Üí b
3 ‚Üí a
4 ‚Üí c
5 ‚Üí a
```

---

## üìò 4. **Custom Module Example**

### ‚ûï Step 1: Create a file `mymath.py`

```python
# mymath.py
def add(a, b):
    return a + b

def square(x):
    return x * x
```

### ‚ûï Step 2: Use it in your main file

```python
# main.py
import mymath

print(mymath.add(2, 3))    # Output: 5
print(mymath.square(4))    # Output: 16
```

---
