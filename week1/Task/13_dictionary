## 🧠 **Dictionary in Python – Full Theory Guide**

---

### 📘 **Definition:**

A **dictionary** in Python is an **unordered**, **mutable**, and **indexed** collection of **key-value pairs**. It is used to store data values like a map, where each key is unique and is associated with a specific value.

```python
# Example:
student = {"name": "Alice", "age": 21, "course": "Python"}
```

---

### 🧩 **Key Properties:**

| Property       | Description                                                        |
| -------------- | ------------------------------------------------------------------ |
| Ordered        | As of Python 3.7+, dictionaries maintain insertion order           |
| Mutable        | Can add, update, or delete key-value pairs after creation          |
| Key Uniqueness | Keys must be unique and immutable (strings, numbers, tuples, etc.) |
| Indexed        | Accessed via keys, not positional indexes                          |

---

### 🔠 **Data Structure Format:**

```python
dictionary_name = {
    key1: value1,
    key2: value2,
    key3: value3
}
```

---

### 🧾 **Types of Dictionary Usage:**

| Type                         | Example                                               |
| ---------------------------- | ----------------------------------------------------- |
| **Empty Dictionary**         | `my_dict = {}`                                        |
| **With Data**                | `my_dict = {'a': 1, 'b': 2}`                          |
| **Nested Dictionary**        | `my_dict = {'student': {'name': 'Alice', 'age': 22}}` |
| **Using dict() constructor** | `my_dict = dict(name='Alice', age=22)`                |
| **Using zip() for creation** | `dict(zip(keys, values))`                             |

---

### 📊 **Dictionaries vs Other Data Types**

| Feature        | Dictionary       | List          | Set      | Tuple         |
| -------------- | ---------------- | ------------- | -------- | ------------- |
| Indexed by     | **Keys**         | Index numbers | No index | Index numbers |
| Mutable        | ✅ Yes           | ✅ Yes        | ✅ Yes   | ❌ No         |
| Ordered        | ✅ (Python 3.7+) | ✅ Yes        | ❌ No    | ✅ Yes        |
| Duplicate Keys | ❌ No            | ✅ Yes        | ❌ No    | ✅ Yes        |

---

### 🛠️ **Common Dictionary Methods**

| Method          | Description                          |
| --------------- | ------------------------------------ |
| `dict.keys()`   | Returns a list of keys               |
| `dict.values()` | Returns a list of values             |
| `dict.items()`  | Returns a list of key-value pairs    |
| `dict.get(key)` | Returns value of key, else `None`    |
| `dict.update()` | Updates dictionary with another dict |
| `dict.pop(key)` | Removes key and returns value        |
| `dict.clear()`  | Removes all items                    |
| `dict.copy()`   | Returns a shallow copy               |

---

### 💡 **Important Points to Remember:**

1. **Keys must be immutable** – Strings, numbers, and tuples can be keys.
2. **Values can be any type** – Even another dictionary or list.
3. **Duplicates not allowed** in keys, but **values can be duplicated**.
4. Dictionaries are **efficient for lookup**, insert, delete, and update operations.
5. Dictionaries use **hashing** internally for key lookup.

---

### 🧠 **Key Use Cases of Dictionaries:**

- Database-like structures (records, objects)
- Frequency counters
- Caching results
- Configuration settings
- Fast lookups by key

---

### 📘 **Dictionary – Visual Representation:**

#### 📊 Diagram:

```
dictionary = {
    "name"  : "Alice",
    "age"   : 21,
    "email" : "alice@example.com"
}
          Key      →      Value
        "name"     →     "Alice"
        "age"      →      21
        "email"    → "alice@example.com"
```

---

### ⚙️ **Real-World Example (Student Record):**

```python
student = {
    "id": 101,
    "name": "John",
    "subjects": ["Math", "Physics"],
    "marks": {"Math": 85, "Physics": 90}
}
```

---

### 🔑 **Tips for Working with Dictionaries:**

- Use `.get(key, default)` to avoid key errors.
- Use **dictionary comprehension** for quick filtering or transformation:

```python
squared = {x: x**2 for x in range(5)}  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
```

- Loop through `.items()` for key-value access:

```python
for k, v in my_dict.items():
    print(k, v)
```

---

### 📎 **Cheat Sheet Summary**

| Feature     | Example                      |
| ----------- | ---------------------------- |
| Create      | `d = {'a': 1, 'b': 2}`       |
| Add/Update  | `d['c'] = 3`                 |
| Access      | `d['a']` or `d.get('a')`     |
| Delete      | `del d['a']` or `d.pop('a')` |
| Loop        | `for k, v in d.items():`     |
| Keys/Values | `d.keys()` / `d.values()`    |

---

---

## 🧪 PRACTICE EXERCISES – PYTHON DICTIONARY ✅

---

### 🔸 **Exercise 1: Frequency Counter**

Write a program to count the frequency of each character in a string.

```python
# Solution:
text = "dictionary"
freq = {}

for char in text:
    freq[char] = freq.get(char, 0) + 1

print(freq)
# Output: {'d': 1, 'i': 2, 'c': 1, 't': 1, 'o': 1, 'n': 1, 'a': 1, 'r': 1, 'y': 1}
```

---

### 🔸 **Exercise 2: Merge Two Dictionaries**

```python
# Solution:
dict1 = {"a": 1, "b": 2}
dict2 = {"b": 3, "c": 4}

# Merge using update
dict1.update(dict2)
print(dict1)
# Output: {'a': 1, 'b': 3, 'c': 4}
```

---

### 🔸 **Exercise 3: Convert Two Lists into a Dictionary**

```python
# Solution:
keys = ["name", "age", "course"]
values = ["Alice", 21, "Python"]

merged = dict(zip(keys, values))
print(merged)
# Output: {'name': 'Alice', 'age': 21, 'course': 'Python'}
```

---

### 🔸 **Exercise 4: Find Key with Maximum Value**

```python
# Solution:
marks = {"Math": 88, "Science": 92, "English": 85}
top_subject = max(marks, key=marks.get)
print(top_subject)
# Output: Science
```

---

### 🔸 **Exercise 5: Swap Keys and Values**

```python
# Solution:
original = {"a": 1, "b": 2, "c": 3}
swapped = {v: k for k, v in original.items()}
print(swapped)
# Output: {1: 'a', 2: 'b', 3: 'c'}
```

---

## 📘 MCQs – DICTIONARIES IN PYTHON ✅

---

### ✅ **Q1. What is the correct syntax to access a value in a dictionary?**

a) `dict.value('key')`
b) `dict['key']`
c) `dict.getvalue('key')`
d) `dict.key`

**Answer:** ✅ **b) dict\['key']**

---

### ✅ **Q2. What will be the output of:**

```python
d = {'a': 10, 'b': 20}
print(d.get('c'))
```

a) Error
b) 0
c) None
d) 'c'

**Answer:** ✅ **c) None**

---

### ✅ **Q3. Which method is used to return all key-value pairs in a dictionary?**

a) `pairs()`
b) `keys()`
c) `items()`
d) `values()`

**Answer:** ✅ **c) items()**

---

### ✅ **Q4. Which of the following is NOT a valid dictionary key?**

a) String
b) Integer
c) Tuple
d) List

**Answer:** ✅ **d) List**
(List is mutable and cannot be a key.)

---

### ✅ **Q5. How do you safely access a key that might not exist in a dictionary?**

a) `dict['key']`
b) `dict.get('key')`
c) `dict.find('key')`
d) `dict.key`

**Answer:** ✅ **b) dict.get('key')**

---

## 💼 INTERVIEW-STYLE QUESTIONS

---

### 🔹 **Q1. What are the main differences between a list and a dictionary?**

**Answer:**

- **List** is an ordered collection accessed by index.
- **Dictionary** is an unordered (as of pre-3.7) collection accessed by key.
- List allows duplicate values; Dictionary does not allow duplicate keys.
- Dictionaries are more efficient for lookup using keys.

---

### 🔹 **Q2. Can dictionary keys be mutable?**

**Answer:**
No, dictionary keys must be immutable (int, float, string, tuple). Mutable types like list or another dictionary cannot be keys.

---

### 🔹 **Q3. How would you remove all items from a dictionary?**

**Answer:**
Use `dict.clear()` to remove all key-value pairs.

---

### 🔹 **Q4. What happens if you try to access a non-existing key using square brackets `[]`?**

**Answer:**
It will raise a `KeyError`. Use `.get()` to safely avoid this.

---

### 🔹 **Q5. How do you iterate through a dictionary?**

**Answer:**

```python
for key, value in my_dict.items():
    print(key, value)
```

---
