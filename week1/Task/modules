Here is a **complete guide on Python Modules**, including:

- Definitions of all related terms
- Key points
- Visual chart of types
- Example codes with output in comments
- Graphical comparison of **module**, **package**, and **library**

---

## ðŸ§  What is a Module in Python?

A **module** is a file containing Python code (functions, classes, variables) that you can reuse in other Python programs by importing it.

### âœ… Why Use Modules?

- Code reuse
- Better code organization
- Avoid redundancy
- Easier debugging & maintenance

---

## ðŸ”¤ Definitions of Key Terms

| **Term**                | **Definition**                                                                 |
| ----------------------- | ------------------------------------------------------------------------------ |
| **Module**              | A Python file (`.py`) that contains code like functions, variables, or classes |
| **Import**              | The keyword used to bring a module's contents into the current script          |
| **Built-in Module**     | Modules that come with Python installation (e.g., `math`, `os`)                |
| **User-defined Module** | Custom modules written by the user (e.g., `my_module.py`)                      |
| **Package**             | A folder that contains multiple modules (must include `__init__.py` file)      |
| **Library**             | A collection of modules and packages that solve a specific problem             |

---

## ðŸ“Š Types of Modules in Python

```
                   +--------------------------+
                   |      Python Modules      |
                   +-----------+--------------+
                               |
        +----------------------+--------------------+
        |                                           |
+------------------+                     +----------------------+
| Built-in Modules |                     | User-defined Modules |
+------------------+                     +----------------------+
| math, os, random |                     | my_module.py         |
| datetime, sys    |                     | utils.py             |
+------------------+                     +----------------------+
```

---

## ðŸ§ª Built-in Module Example: `math`

```python
import math

print(math.sqrt(25))  # Output: 5.0
print(math.pi)        # Output: 3.141592653589793
```

---

## ðŸ§ª User-defined Module Example

Create a file called `greet.py`:

```python
# greet.py
def say_hello(name):
    return f"Hello, {name}!"

pi_value = 3.14
```

Then use it in another file:

```python
# main.py
import greet

print(greet.say_hello("Prashanshi"))  # Output: Hello, Prashanshi!
print(greet.pi_value)                 # Output: 3.14
```

---

## ðŸ“‚ Python Package Example

```
my_package/
â”œâ”€â”€ __init__.py
â”œâ”€â”€ module1.py
â””â”€â”€ module2.py
```

- `__init__.py` can be empty or contain setup code.
- You can import like:

```python
from my_package import module1
```

---

## ðŸ“ˆ Graph: Difference Between Module, Package, Library

| Feature   | Module            | Package                             | Library                         |
| --------- | ----------------- | ----------------------------------- | ------------------------------- |
| Structure | Single `.py` file | Folder with modules & `__init__.py` | Collection of packages/modules  |
| Use       | Code reuse        | Organizing related modules          | Large-scale reuse (e.g., NumPy) |
| Example   | `math.py`         | `my_package/`                       | `scikit-learn`, `TensorFlow`    |

---

## ðŸ”¢ Commonly Used Built-in Modules

| Module     | Purpose                      |
| ---------- | ---------------------------- |
| `math`     | Mathematical operations      |
| `random`   | Random number generation     |
| `datetime` | Working with dates and times |
| `os`       | Operating system interface   |
| `sys`      | System-specific parameters   |
| `json`     | JSON encoding and decoding   |
| `re`       | Regular expressions          |

---

## ðŸ“˜ Importing Modules: 4 Ways

```python
# 1. Basic import
import math
print(math.factorial(5))  # Output: 120

# 2. Import with alias
import math as m
print(m.sqrt(49))  # Output: 7.0

# 3. Import specific function
from math import pow
print(pow(2, 3))  # Output: 8.0

# 4. Import all (not recommended)
from math import *
print(sin(0))  # Output: 0.0
```

---

## ðŸ“¦ Creating and Using Your Own Module

### Step 1: Create `calculator.py`

```python
# calculator.py
def add(a, b):
    return a + b

def subtract(a, b):
    return a - b
```

### Step 2: Create `main.py`

```python
import calculator

print(calculator.add(10, 5))      # Output: 15
print(calculator.subtract(10, 5)) # Output: 5
```

---

## ðŸ“Œ Key Points Summary (Bullet Format)

- A **module** is a `.py` file with functions, classes, or variables.
- **Built-in modules** come with Python; **user-defined** ones are created by developers.
- Modules help **reuse** code and improve **organization**.
- A **package** is a collection of modules inside a directory.
- A **library** is a bigger bundle containing many packages and modules.

---

## ðŸ§  Tip: Use `dir()` to explore module contents

```python
import math
print(dir(math))  # Lists all attributes/functions in math module
```

---
