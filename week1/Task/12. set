## ‚úÖ **Definition of Set in Python**

A **set** is an **unordered, unindexed** collection of **unique elements**.
It is **mutable** (can be changed) and supports various operations like union, intersection, and difference.

```python
# Example:
my_set = {1, 2, 3, 4}
print(my_set)
# Output: {1, 2, 3, 4}
```

---

## üìå **Key Points about Sets**

| Feature                | Description                                                        |
| ---------------------- | ------------------------------------------------------------------ |
| **Unordered**          | No guaranteed order of elements                                    |
| **No Duplicates**      | Duplicate values are automatically removed                         |
| **Mutable**            | You can add or remove elements                                     |
| **Immutable Elements** | Only immutable types can be added (e.g., numbers, strings, tuples) |
| **Set Operations**     | Supports union, intersection, difference, etc.                     |

---

## üß† **Why Use Sets?**

- Fast membership testing (`in`)
- Removing duplicates
- Mathematical operations
- Cleaner data manipulation

---

## üìä Text-Based Chart: Set vs List vs Tuple vs Dictionary

| Feature    | Set       | List      | Tuple     | Dictionary            |
| ---------- | --------- | --------- | --------- | --------------------- |
| Ordered    | ‚ùå        | ‚úÖ        | ‚úÖ        | ‚úÖ (from Python 3.7+) |
| Duplicates | ‚ùå        | ‚úÖ        | ‚úÖ        | ‚ùå (keys only)        |
| Mutable    | ‚úÖ        | ‚úÖ        | ‚ùå        | ‚úÖ                    |
| Indexing   | ‚ùå        | ‚úÖ        | ‚úÖ        | ‚úÖ (via keys)         |
| Syntax     | `{1,2,3}` | `[1,2,3]` | `(1,2,3)` | `{"a":1, "b":2}`      |

---

## üîÅ **Creating Sets in Python**

```python
# 1. Using curly braces
a = {1, 2, 3, 4}
print(a)

# 2. Using set() constructor
b = set([1, 2, 2, 3])
print(b)  # Output: {1, 2, 3}
```

---

## ‚úçÔ∏è **Set Methods in Python with Examples**

| Method           | Description                                   | Example               |
| ---------------- | --------------------------------------------- | --------------------- |
| `add()`          | Adds an element                               | `s.add(5)`            |
| `remove()`       | Removes specific element (Error if not found) | `s.remove(2)`         |
| `discard()`      | Removes element (No error if missing)         | `s.discard(2)`        |
| `pop()`          | Removes random element                        | `s.pop()`             |
| `clear()`        | Removes all elements                          | `s.clear()`           |
| `union()`        | Combines two sets                             | `s1.union(s2)`        |
| `intersection()` | Common elements                               | `s1.intersection(s2)` |
| `difference()`   | Elements in s1 but not in s2                  | `s1.difference(s2)`   |

```python
s1 = {1, 2, 3}
s2 = {3, 4, 5}

print(s1.union(s2))         # {1, 2, 3, 4, 5}
print(s1.intersection(s2))  # {3}
print(s1.difference(s2))    # {1, 2}
```

---

## üîÑ **Looping Through a Set**

```python
fruits = {"apple", "banana", "cherry"}
for fruit in fruits:
    print(fruit)
```

---

## üìâ Set Venn Diagram (Textual)

```
Set A = {1, 2, 3}
Set B = {3, 4, 5}

Union        = {1, 2, 3, 4, 5}
Intersection = {3}
Difference   = A - B = {1, 2}
Symmetric Diff = {1, 2, 4, 5}
```

---

## ‚ö†Ô∏è Important Notes

- `{}` creates an **empty dictionary**, not a set.

  ```python
  type({})  # <class 'dict'>
  ```

  Use `set()` for an empty set.

- Elements must be **hashable** (i.e., immutable).

  ```python
  s = {1, 2, (3, 4)}     # Valid
  s = {1, 2, [3, 4]}     # ‚ùå Invalid (list is mutable)
  ```

---

## üß™ Practice Examples with Output

```python
# Example 1: Duplicate removal
nums = [1, 2, 2, 3, 4, 4, 5]
unique_nums = set(nums)
print(unique_nums)  # Output: {1, 2, 3, 4, 5}

# Example 2: Check membership
colors = {"red", "green", "blue"}
print("green" in colors)  # Output: True
print("yellow" in colors)  # Output: False

# Example 3: Adding and removing
colors.add("yellow")
print(colors)  # {"red", "green", "blue", "yellow"}
colors.remove("red")
print(colors)  # {"green", "blue", "yellow"}
```

---

## üìö Types of Sets

| Type           | Description                |
| -------------- | -------------------------- |
| **Normal Set** | Mutable and common set     |
| **Frozen Set** | Immutable version of a set |

```python
fs = frozenset([1, 2, 3])
# fs.add(4) ‚Üí Error: can't modify
```

---

## ‚úÖ Summary

- **Set** = Unordered + Unique + Mutable
- Great for **duplicate removal**, **math operations**, and **fast lookup**
- Use `set()` to create a set and explore operations like union, intersection, etc.

---
