## ðŸ”¢ **Operators in Python**

Operators in Python are **special symbols** used to perform operations on variables and values. Python supports a wide variety of operators grouped into several categories:

---

### âœ… 1. **Arithmetic Operators**

Used for basic mathematical operations:

| Operator | Description         | Example  | Result |
| -------- | ------------------- | -------- | ------ |
| `+`      | Addition            | `3 + 2`  | `5`    |
| `-`      | Subtraction         | `5 - 2`  | `3`    |
| `*`      | Multiplication      | `4 * 2`  | `8`    |
| `/`      | Division            | `6 / 2`  | `3.0`  |
| `//`     | Floor Division      | `7 // 2` | `3`    |
| `%`      | Modulus (remainder) | `7 % 2`  | `1`    |
| `**`     | Exponentiation      | `2 ** 3` | `8`    |

---

### âœ… 2. **Assignment Operators**

Used to assign values to variables:

| Operator | Description             | Example   |
| -------- | ----------------------- | --------- |
| `=`      | Assign                  | `x = 5`   |
| `+=`     | Add and assign          | `x += 3`  |
| `-=`     | Subtract and assign     | `x -= 2`  |
| `*=`     | Multiply and assign     | `x *= 2`  |
| `/=`     | Divide and assign       | `x /= 2`  |
| `//=`    | Floor divide and assign | `x //= 2` |
| `%=`     | Modulus and assign      | `x %= 2`  |
| `**=`    | Exponent and assign     | `x **= 2` |

---

### âœ… 3. **Comparison (Relational) Operators**

Used to compare values and return Boolean results:

| Operator | Description              | Example  | Result  |
| -------- | ------------------------ | -------- | ------- |
| `==`     | Equal to                 | `3 == 3` | `True`  |
| `!=`     | Not equal to             | `4 != 3` | `True`  |
| `>`      | Greater than             | `5 > 2`  | `True`  |
| `<`      | Less than                | `3 < 2`  | `False` |
| `>=`     | Greater than or equal to | `4 >= 4` | `True`  |
| `<=`     | Less than or equal to    | `2 <= 1` | `False` |

---

### âœ… 4. **Logical Operators**

Used to combine multiple conditions:

| Operator | Description           | Example          | Result  |
| -------- | --------------------- | ---------------- | ------- |
| `and`    | True if both are True | `True and False` | `False` |
| `or`     | True if any is True   | `True or False`  | `True`  |
| `not`    | Inverts the result    | `not True`       | `False` |

---

### âœ… 5. **Bitwise Operators**

Operate on binary numbers:

| Operator | Description | Example  | Result |     |     |
| -------- | ----------- | -------- | ------ | --- | --- |
| `&`      | AND         | `5 & 3`  | `1`    |     |     |
| \`       | \`          | OR       | \`5    | 3\` | `7` |
| `^`      | XOR         | `5 ^ 3`  | `6`    |     |     |
| `~`      | NOT         | `~5`     | `-6`   |     |     |
| `<<`     | Left shift  | `5 << 1` | `10`   |     |     |
| `>>`     | Right shift | `5 >> 1` | `2`    |     |     |

---

### âœ… 6. **Membership Operators**

Test if a sequence contains a value:

| Operator | Description             | Example            | Result |
| -------- | ----------------------- | ------------------ | ------ |
| `in`     | Present in sequence     | `'a' in 'cat'`     | `True` |
| `not in` | Not present in sequence | `'x' not in 'cat'` | `True` |

---

### âœ… 7. **Identity Operators**

Compare memory locations (object identity):

| Operator | Description         | Example      | Result       |
| -------- | ------------------- | ------------ | ------------ |
| `is`     | Same object         | `x is y`     | `True/False` |
| `is not` | Not the same object | `x is not y` | `True/False` |

---

### ðŸ“Œ **Conclusion**

Python operators are the foundation for expressions and logic in any program. Mastering them is key to writing efficient and clear Python code.

---

